class Solution {
    public List<List<String>> partition(String s) {
         List<List<String>> result = new ArrayList<List<String>>();
        dfs(0, result, new ArrayList<String>(), s);
        return result;
    }
    
    void dfs(int a, List<List<String>> result, List<String> curr, String s){
        if(a >= s.length()){
            result.add(new ArrayList<String>(curr));
        }
        
        for(int e = a; e<s.length(); e++){
            if(isPalindrome(s, a, e)){
                curr.add(s.substring(a,e+1));
                dfs(e+1, result, curr, s);
                curr.remove(curr.size()-1);
            }
        }
    }
    
    boolean isPalindrome(String s, int low, int high) {
        while (low < high) {
            if (s.charAt(low++) != s.charAt(high--)) return false;
        }
        return true;
    }
}
