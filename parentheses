class Solution {
    public List<String> generateParenthesis(int n) {
        ArrayList<String> list = new ArrayList<String>();
        backtracking(list,"", 0, 0, n);
        return list;
    }
    
    public void backtracking(ArrayList<String>list, String str, int open, int close, int max){
        if(str.length() == 2*max){
            list.add(str);
            return;
        } 
        
        if(open < max){
            backtracking(list, str+"(", open+1, close, max);
        }
        if(close < open){
            backtracking(list, str+")", open, close+1, max);
        }
    }
}
