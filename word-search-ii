//reference: https://leetcode.com/problems/word-search-ii/discuss/59780/Java-15ms-Easiest-Solution-(100.00)
class Solution {
    public List<String> findWords(char[][] board, String[] words) {
        TireNode root = makeTire(words);
        List<String> result = new ArrayList<String>();
        for(int i=0; i<board.length; i++){
            for(int j=0; j<board[0].length; j++){
                dfs(i, j, board, root, result);
            }
        }
        return result;
    }
    
    public void dfs(int i, int j, char[][] board, TireNode p, List<String> result){
        char c = board[i][j];
        if(c == '#'||p.next[c-'a'] == null) return;
        p = p.next[c-'a'];
        if(p.word!= null){
            result.add(p.word);
            p.word = null;
        }
        
        board[i][j] = '#';
        if(i>0) dfs(i-1, j, board, p, result);
        if(j>0) dfs(i, j-1, board, p, result);
        if(i<board.length-1) dfs(i+1, j, board, p, result);
        if(j<board[0].length-1) dfs(i, j+1, board, p, result);
        board[i][j] = c;
    }
    public TireNode makeTire(String [] words){
        TireNode root = new TireNode();
        for(String s : words){
            TireNode p = root;
            char [] charArr = s.toCharArray();
            for(char c: charArr){
                int i = c-'a';
                if(p.next[i]==null){
                    p.next[i] = new TireNode();
                }
                p = p.next[i];
            }
            p.word = s;
        }
        return root;
    }
    class TireNode
    {
        String word;
        TireNode [] next = new TireNode[26];
    }
}
